# Only in case of OpenShift
scc:
  create: true
  name: ""

collectord:
  image:
    repository: docker.io/outcoldsolutions/collectorforkubernetes
  
  clusterRole:
    name: ""
    create: true
    rules:
    - apiGroups:     ['extensions']
      resources:     ['podsecuritypolicies']
      verbs:         ['use']
      resourceNames: ['privileged']
  
  # Additional configuration files for ConfigMap
  configMap:
    allAdditionalFiles:
      "es-default-index-lifecycle-management-policy.json": |
        {
          "policy": {
            "_meta": {
              "description": "Default policy for Collectord indexes",
              "version": 1
            },
            "phases": {
              "hot": {
                "min_age": "0ms",
                "actions": {
                  "rollover": {
                    "max_primary_shard_size": "50gb",
                    "max_age": "30d"
                  }
                }
              }
            }
          }
        }
      "es-default-index-template.json": |
        {
          "version": 1,
          "data_stream": {},
          "_meta": {
            "description": "Default template for Collectord indexes"
          },
          "priority": 500,
          "template": {
            "settings": {
              "index": {
                "lifecycle": {
                  "name": "logs-collectord"
                },
                "refresh_interval": "5s",
                "mapping": {
                  "total_fields": {
                    "limit": "10000"
                  }
                },
                "max_docvalue_fields_search": "200"
              },
              "query": {
                "default_field": [
                  "message",
                  "container.name",
                  "container.image.name",
                  "host.name",
                  "orchestrator.namespace",
                  "orchestrator.cluster.name",
                  "container.name",
                  "kubernetes.pod.name",
                  "kubernetes.pod.id",
                  "kubernetes.pod.ip",
                  "kubernetes.namespace.name",
                  "kubernetes.node.name",
                  "kubernetes.cluster.name",
                  "kubernetes.replicaset.name",
                  "kubernetes.deployment.name",
                  "kubernetes.statefulset.name",
                  "kubernetes.daemonset.name",
                  "kubernetes.job.name",
                  "kubernetes.cronjob.name"
                ]
              }
            },
            "mappings": {
              "dynamic_templates": [
                {
                  "kubernetes.pod.labels.*": {
                    "path_match": "kubernetes.pod.labels.*",
                    "mapping": {  "type": "keyword" },
                    "match_mapping_type": "*"
                  }
                },
                {
                  "kubernetes.namespace.labels.*": {
                    "path_match": "kubernetes.namespace.labels.*",
                    "mapping": { "type": "keyword" },
                    "match_mapping_type": "*"
                  }
                },
                {
                  "kubernetes.node.labels.*": {
                    "path_match": "kubernetes.node.labels.*",
                    "mapping": { "type": "keyword" },
                    "match_mapping_type": "*"
                  }
                },
                {
                  "kubernetes.daemonset.labels.*": {
                    "path_match": "kubernetes.daemonset.labels.*",
                    "mapping": { "type": "keyword" },
                    "match_mapping_type": "*"
                  }
                },
                {
                  "kubernetes.replicaset.labels.*": {
                    "path_match": "kubernetes.replicaset.labels.*",
                    "mapping": { "type": "keyword" },
                    "match_mapping_type": "*"
                  }
                },
                {
                  "kubernetes.deployment.labels.*": {
                    "path_match": "kubernetes.deployment.labels.*",
                    "mapping": { "type": "keyword" },
                    "match_mapping_type": "*"
                  }
                },
                {
                  "kubernetes.statefulset.labels.*": {
                    "path_match": "kubernetes.statefulset.labels.*",
                    "mapping": { "type": "keyword" },
                    "match_mapping_type": "*"
                  }
                },
                {
                  "kubernetes.job.labels.*": {
                    "path_match": "kubernetes.job.labels.*",
                    "mapping": { "type": "keyword" },
                    "match_mapping_type": "*"
                  }
                },
                {
                  "kubernetes.cronjob.labels.*": {
                    "path_match": "kubernetes.cronjob.labels.*",
                    "mapping": { "type": "keyword" },
                    "match_mapping_type": "*"
                  }
                },
                {
                  "strings_as_keyword": {
                    "mapping": { "ignore_above": 1024, "type": "keyword" },
                    "match_mapping_type": "string"
                  }
                }
              ],
              "properties": {
                "@timestamp": { "type": "date"},
                "message":{"type":"match_only_text"},
                "collectord_errors": {"type": "keyword","ignore_above": 1024},
                "input":{"properties":{"type":{"ignore_above":1024,"type":"keyword"}}},
                "container": {"properties": {
                  "name": { "ignore_above": 1024, "type": "keyword"},
                  "id": { "ignore_above": 1024, "type": "keyword"},
                  "runtime": {"ignore_above": 1024, "type": "keyword"},
                  "image": {"properties": {
                    "name": { "ignore_above": 1024, "type": "keyword"}
                  }}
                }
                },
                "event": {"properties": {
                  "id": {"ignore_above": 1024, "type": "keyword"}
                }},
                "host": {"properties": {
                  "name": {"ignore_above": 1024, "type": "keyword"},
                  "architecture": {"ignore_above": 1024, "type": "keyword"},
                  "hostname": {"ignore_above": 1024, "type": "keyword"}
                }},
                "log": { "properties": {
                  "file": { "properties": {
                    "path": {"ignore_above": 1024, "type": "keyword"}
                  }},
                  "offset": {"type": "long"},
                  "syslog": {"properties": {
                    "appname": {"ignore_above": 1024, "type": "keyword"},
                    "facility": {"properties": {
                      "code": {"type": "long"}
                    }},
                    "priority": {"type": "long"},
                    "procid": {"type": "long"},
                    "hostname": {"ignore_above": 1024, "type": "keyword"}
                  }}
                }},
                "orchestrator": {"properties": {
                  "cluster": {"properties": {
                    "name": {"ignore_above": 1024, "type": "keyword"}
                  }},
                  "namespace": {"properties": {
                    "name":{"path":"kubernetes.namespace.name","type":"alias"}
                  }},
                  "type": {"ignore_above": 1024, "type": "keyword"}
                }},
                "stream": {"ignore_above": 1024, "type": "keyword"},
                "agent":{"properties":{
                  "hostname":{"path":"agent.name","type":"alias"},
                  "name":{"ignore_above":1024,"type":"keyword"},
                  "id":{"ignore_above":1024,"type":"keyword"},
                  "type":{"ignore_above":1024,"type":"keyword"},
                  "ephemeral_id":{"ignore_above":1024,"type":"keyword"},
                  "version":{"ignore_above":1024,"type":"keyword"}
                }},
                "ecs":{"properties":{"version":{"ignore_above":1024,"type":"keyword"}}},
                "kubernetes": { "properties": {
                  "container": {"properties": {
                    "imageid": {"ignore_above": 1024, "type": "keyword"}
                  }},
                  "host": {"properties": {
                    "ip": {"type": "ip"}
                  }},
                  "namespace": {"properties": {
                    "name": {"ignore_above": 1024, "type": "keyword"}
                  }},
                  "node": { "properties": {
                    "id": {"ignore_above": 1024, "type": "keyword"},
                    "name": {"ignore_above": 1024,"type": "keyword"}
                  }},
                  "pod": {"properties": {
                    "id": {"ignore_above": 1024,"type": "keyword"},
                    "ip": {"type": "ip"},
                    "name": {"ignore_above": 1024,"type": "keyword"}
                  }},
                  "statefulset": { "properties": {
                    "id": {"ignore_above": 1024,"type": "keyword"},
                    "name": {"ignore_above": 1024,"type": "keyword"}
                  }},
                  "replicaset": {"properties": {
                    "id": {"ignore_above": 1024,"type": "keyword"},
                    "name": {"ignore_above": 1024, "type": "keyword"}
                  }},
                  "deployment": { "properties": {
                    "id": {"ignore_above": 1024,"type": "keyword"},
                    "name": {"ignore_above": 1024,"type": "keyword" }
                  }},
                  "cronjob": {"properties": {
                    "id": {"ignore_above": 1024,"type": "keyword"},
                    "name": {"ignore_above": 1024, "type": "keyword"}
                  }},
                  "job": {"properties": {
                    "id": {"ignore_above": 1024,"type": "keyword"},
                    "name": {"ignore_above": 1024, "type": "keyword"}
                  }}
                }},
                "volume": {"properties": {
                    "name": {"ignore_above": 1024,"type": "keyword"}
                }}
              }
            }
          },
          "index_patterns": ["logs-collectord-${COLLECTORD_VERSION}"]
        }
      "es-failed-index-template.json": |
        {
          "version": 1,
          "data_stream": {},
          "_meta": {
            "description": "Default template for Collectord indexes for events that failed to be ingested"
          },
          "priority": 1000,
          "template": {
            "settings": {
              "index": {
                "lifecycle": {
                  "name": "logs-collectord"
                },
                "refresh_interval": "5s",
                "mapping": {
                  "total_fields": {
                    "limit": "10000"
                  }
                },
                "max_docvalue_fields_search": "200"
              },
              "query": {
                "default_field": [
                  "message"
                ]
              }
            },
            "mappings": {
              "properties": {
                "@timestamp": {
                  "type": "date"},
                "message": {
                  "type": "match_only_text"}
              }
            }
          },
          "index_patterns": [
            "logs-collectord-failed-${COLLECTORD_VERSION}"]
        }
  
  
  configuration:
    general:
      # IMPORTANT: Please review license https://www.outcoldsolutions.com/docs/license-agreement/
      # and accept license by changing the value to *true*
      acceptLicense: false
      license: ""
      dataPath: "./data/"
      logLevel: info
      httpServerBinding: ""
      httpServerLog: false
      telemetryEndpoint: "https://license.outcold.solutions/telemetry/"
      licenseEndpoint: "https://license.outcold.solutions/license/"
      licenseServerProxyUrl: ""
      licenseServerProxyBasicAuth: ""
      hostname: ""
      defaultOutput: "elasticsearch"
      fileInputBufferSize: "256b"
      fileInputLineMaxSize: "1mb"
      fields:
        "ecs.version": "8.0.0"
        "orchestrator.cluster.name": "-"
        "orchestrator.type": "kubernetes"
        "agent.type": "collectord"
        "agent.version": "${COLLECTORD_VERSION}"
        "agent.ephemeral_id": "${COLLECTORD_INSTANCE_RUNTIME_ID}"
        "agent.id": "${COLLECTORD_INSTANCE_ID}"
        "agent.name": "${KUBERNETES_NODENAME}"
        "host.name": "${KUBERNETES_NODENAME}"
        "host.hostname": "${KUBERNETES_NODENAME}"
        "host.architecture": "${COLLECTORD_ARCH}"
      ec2Metadata: {}
      annotationsSubdomain: "elasticsearch"
      thruputPerSecond: ""
      tooOldEvents: ""
      tooNewEvents: ""
      autoSkipGzipFiles: true
      kubernetes:
        serviceURL: ""
        nodeName: ""
        tokenPath: /var/run/secrets/kubernetes.io/serviceaccount/token
        certPath: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        timeout: 30m
        metadataTTL: 30s
        volumesRootDir: /rootfs/var/lib/kubelet/
        includeAnnotations: []
        excludeLabels: []
        watch:
          - 'v1/namespace'
          - 'apps/v1/deployment'
          - 'collectord.io/v1/configuration'
        watchImplementation: 2
      crio:
        url: unix:///rootfs/var/run/crio/crio.sock
        timeout: 1m
      containerd:
        runtimePath: /rootfs/var/run/containerd
        namespace: k8s.io
    licenseClient:
      url: ""
      basicAuth: ""
      insecure: false
      capath: ""
      caname: ""
      proxyUrl: ""
      proxyBasicAuth: ""
    pipeJoin:
      disabled: false
      maxInterval: 100ms
      maxWait: 1s
      maxSize: 1MB
      patternRegex: '^[^\s]'
    pipeReplace: []
    pipeHash: []
    
    outputs:
      elasticsearch:
        default: 
          dataStream: 'logs-collectord-{{agent.version}}'
          dataStreamFailedEvents: 'logs-collectord-failed-{{agent.version}}'
          host: ""
          hosts: []
          hostSelection: "random-with-round-robin"
          authorizationBasicUsername: ""
          authorizationBasicPassword: ""
          headers:
            "Content-Type": "application/json"
            "Accept": "application/json"
          insecure: false
          caPath: ""
          caName: ""
          clientCertPath: ""
          clientKeyPath: ""
          frequency: "5s"
          batchSize: "768K"
          events: "50"
          proxyUrl: ""
          proxyBasicAuth: ""
          timeout: "30s"
          compressionLevel: "default"
          threads: 2
          threadsAlgorithm: "weighted"
          put:
            "_ilm/policy/logs-collectord": "/config/es-default-index-lifecycle-management-policy.json"
            "_index_template/logs-collectord-${COLLECTORD_VERSION}": "/config/es-default-index-template.json"
            "_index_template/logs-collectord-failed-${COLLECTORD_VERSION}": "/config/es-failed-index-template.json"
          queueSize: 1024

    # Input configurations
    inputs:
      containerLogs:
        disabled: false
        type: "container"
        path: "/rootfs/var/lib/docker/containers/"
        crioPath: "/rootfs/var/log/pods/"
        pollingInterval: 250ms
        walkingInterval: 5s
        verboseFields: false
        "elasticsearch.datastream": ""
        joinPartialEvents: true
        stripTerminalEscapeSequences: false
        stripTerminalEscapeSequencesRegex: '(\x1b\[\d{1,3}(;\d{1,3})*m)|(\x07)|(\x1b]\d+(\s\d)?;[^\x07]+\x07)|(.*\x1b\[K)'
        samplingPercent: -1
        samplingKey: ""
        output: ""
        thruputPerSecond: ""
        tooOldEvents: ""
        tooNewEvents: ""
        
      applicationLogs:
        disabled: false
        root: /rootfs/
        syncInterval: 5s
        glob: "*.log*"
        pollingInterval: 250ms
        walkingInterval: 5s
        verboseFields: false
        type: "container.file"
        "elasticsearch.datastream": ""
        eventPatternRegex: '^[^\s]'
        eventPatternMaxInterval: 100ms
        eventPatternMaxWait: 1s
        eventPatternMaxSize: 1MB
        samplingPercent: -1
        samplingKey: ""
        output: ""
        thruputPerSecond: ""
        tooOldEvents: ""
        tooNewEvents: ""
        maxHoldAfterClose: 1800s
      
      hostLogs:
        "audit-logs":
          disabled: false
          controlPlaneOnly: true
          path: '/rootfs/var/log/kube-apiserver/'
          glob: 'audit*.log'
          match: ""
          recursive: false
          pollingInterval: 250ms
          walkingInterval: 5s
          verboseFields: false
          type: "file"
          "elasticsearch.datastream": ""
          extraction: '(?P<message>.*"stageTimestamp":"(?P<timestamp>[^"]+)".*)'
          extractionMessageField: 'message'
          timestampField: 'timestamp'
          timestampFormat: '2006-01-02T15:04:05.999999999Z07:00'
          timestampLocation: ""
          samplingPercent: -1
          samplingKey: ""
          output: ""
          thruputPerSecond: ""
          tooOldEvents: ""
          tooNewEvents: ""
          eventPattern: ""
          blacklist: []
          whitelist: []
        "syslog":
          disabled: false
          controlPlaneOnly: false
          path: '/rootfs/var/log/'
          glob: ""
          match: '^(syslog|messages)(.\d+)?$'
          recursive: false
          pollingInterval: 250ms
          walkingInterval: 5s
          verboseFields: false
          type: "file"
          "elasticsearch.datastream": ""
          extraction: '^(?P<timestamp>[A-Za-z]+\s+\d+\s\d+:\d+:\d+)\s(?P<syslog_hostname>[^\s]+)\s(?P<syslog_component>[^:\[]+)(\[(?P<syslog_pid>\d+)\])?: (.+)$'
          extractionMessageField: ""
          timestampField: "timestamp"
          timestampFormat: "Jan 2 15:04:05"
          timestampSetMonth: false
          timestampSetDay: false
          timestampLocation: "Local"
          samplingPercent: -1
          samplingKey: ""
          output: ""
          thruputPerSecond: ""
          tooOldEvents: ""
          tooNewEvents: ""
          eventPattern: '^[^\s]'
          blacklist: []
          whitelist: []
        "logs":
          disabled: false
          controlPlaneOnly: false
          path: '/rootfs/var/log/'
          glob: ""
          match: '^(([\w\-.]+\.log(.[\d\-]+)?)|(docker))$'
          recursive: false
          pollingInterval: 250ms
          walkingInterval: 5s
          verboseFields: false
          type: "file"
          "elasticsearch.datastream": ""
          extraction: ''
          extractionMessageField: ""
          timestampField: ""
          timestampFormat: ""
          timestampSetMonth: false
          timestampSetDay: false
          timestampLocation: ""
          samplingPercent: -1
          samplingKey: ""
          output: ""
          thruputPerSecond: ""
          tooOldEvents: ""
          tooNewEvents: ""
          eventPattern: '^[^\s]'
          blacklist: []
          whitelist: []
        
      
      journald:
        disabled: false
        path:
          persistent: /rootfs/var/log/journal/
          volatile: /rootfs/run/log/journal/
        pollingInterval: 250ms
        startFromRel: ""
        type: "journald"
        "elasticsearch.datastream": ""
        samplingPercent: -1
        samplingKey: ""
        reopenInterval: 1h
        output: ""
        thruputPerSecond: ""
        tooOldEvents: ""
        tooNewEvents: ""
        eventPattern: '^[^\s]'
        blacklist: []
        whitelist: []
        spawnExternalProcess: false
        
      kubernetesEvents:
        disabled: false
        type: "events"
        "elasticsearch.datastream": ""
        output: ""
        excludeManagedFields: true
      kubernetesWatch:
        "pods":
          disabled: false
          refresh: 10m
          apiVersion: v1
          kind: Pod
          namespace: ""
          type: "objects"
          "elasticsearch.datastream": ""
          output: ""
          modifyValues: []
          excludeManagedFields: true
        "resourcequota":
          disabled: false
          refresh: 10m
          apiVersion: v1
          kind: ResourceQuota
          namespace: ""
          type: "objects"
          "elasticsearch.datastream": ""
          output: ""
          modifyValues: []
          excludeManagedFields: true
        "nodes":
          disabled: false
          refresh: 10m
          apiVersion: v1
          kind: Node
          namespace: ""
          type: "objects"
          "elasticsearch.datastream": ""
          output: ""
          modifyValues: []
          excludeManagedFields: true